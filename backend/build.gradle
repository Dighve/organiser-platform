buildscript {
    dependencies {
        classpath 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java-library'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'io.freefair.lombok' version '8.4'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2022.0.4")
    set('testcontainersVersion', "1.19.3")
    set('jwtVersion', "0.11.5")
    set('lombokVersion', "1.18.30")
    set('modelMapperVersion', "3.1.1")
    set('guavaVersion', "32.1.2-jre")
    set('commonsLang3Version', "3.12.0")
    set('flywayVersion', "9.22.3")
    set('mysqlConnectorVersion', "8.0.33")
    set('wiremockVersion', "2.35.0")
    set('awaitilityVersion', "4.2.0")
    set('hamcrestVersion', "2.2")
    set('greenmailVersion', "2.0.0")
    set('assertjVersion', "3.24.2")
}

group = 'com.organiser'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Include all migrations in the build for flexibility
// Local dev uses MariaDB (configured in application.properties)
// Production uses PostgreSQL (configured in application-prod.properties)

// Configure versions
ext {
    springCloudVersion = "2022.0.4"
    testcontainersVersion = "1.19.3"
    jwtVersion = "0.11.5"
    lombokVersion = "1.18.30"
    modelMapperVersion = "3.1.1"
    guavaVersion = "32.1.2-jre"
    commonsLang3Version = "3.12.0"
    flywayVersion = "9.22.3"
    mysqlConnectorVersion = "8.0.33"
    wiremockVersion = "2.35.0"
    awaitilityVersion = "4.2.0"
    hamcrestVersion = "2.2"
    greenmailVersion = "2.0.0"
    assertjVersion = "3.24.2"
}

flyway {
    url = 'jdbc:mariadb://localhost:3307/organiser_platform'
    user = 'organiser_user'
    password = 'organiser_pass'
    baselineOnMigrate = true
    locations = ['classpath:db/migration']
    cleanDisabled = false
}

tasks.named('flywayMigrate') {
    dependsOn compileJava
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    systemProperty 'spring.profiles.active', 'test'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}

// Flyway dependency configuration
dependencies {
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.maven.apache.org/maven2' }
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.4"
        mavenBom "org.testcontainers:testcontainers-bom:1.18.3"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Database
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-mysql:${flywayVersion}"
    runtimeOnly "mysql:mysql-connector-java:${mysqlConnectorVersion}"
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.4'
    // PostgreSQL for production (Render.com)
    runtimeOnly 'org.postgresql:postgresql:42.6.0'
    
    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
    
    // Utils
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'com.h2database:h2'
    testImplementation 'com.icegreen:greenmail-junit5:2.0.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Required for Java 17+
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Required for Java 17+
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Test containers for integration tests
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:mysql:1.19.3'
    
    // AssertJ for fluent assertions
    testImplementation 'org.assertj:assertj-core:3.24.2'
    // Temporarily removed actuator due to compatibility issues
    // implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Test containers for integration testing
    testImplementation("org.testcontainers:testcontainers:${testcontainersVersion}") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }
    testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }
    testImplementation("org.testcontainers:mysql:${testcontainersVersion}") {
        exclude group: 'org.checkerframework', module: 'checker-qual'
    }
    
    // Database drivers for test containers
    testRuntimeOnly 'mysql:mysql-connector-java:8.0.33'
    
    // Spring JDBC for testing
    testImplementation 'org.springframework:spring-jdbc'
    
    // Flyway for testing
    testImplementation 'org.flywaydb:flyway-core'
    
    // Exclude JUnit 4 (vintage) as we're using JUnit 5 (jupiter)
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// Test configuration moved to the dependencies section
